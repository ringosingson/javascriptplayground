colt
WHAT IS A TREE?
A data structure that consists of nodes in a parent / child relationship.
--Lists - linear
--Trees - nonlinear

TREE TERMINOLOGY --

Root - The top node in a tree.
Child -A node directly connected to another node when moving away from the Root.
Parent - The converse notion of a child.
Siblings -A group of nodes with the same parent.
Leaf - A node with no children.
Edge - The connection between one node and another.

KINDS OF TREES
Trees
Binary Trees
Binary Search Trees

Lots of different applications!
--eg
HTML DOM
Network Routing
Abstract Syntax Tree
Artificial Intelligence
Folders in Operating Systems
Computer File Systems

HOW BSTS WORK
--Every parent node has at most two children
--Every node to the left of a parent node is always less than the parent
--Every node to the right of a parent node is always greater than the parent

  --INSERTING A NODE
Steps - Iteratively or Recursively

Create a new node
Starting at the root
Check if there is a root, if not - the root now becomes that new node!
If there is a root, check if the value of the new node is greater than or less than the value of the root
If it is greater 
Check to see if there is a node to the right
If there is, move to that node and repeat these steps
If there is not, add that node as the right property
If it is less
Check to see if there is a node to the left
If there is, move to that node and repeat these steps
If there is not, add that node as the left property

  --Finding a Node in a BST--
Steps - Iteratively or Recursively

Starting at the root
Check if there is a root, if not - we're done searching!
If there is a root, check if the value of the new node is the value we are looking for. If we found it, we're done!
If not, check to see if the value is greater than or less than the value of the root
If it is greater 
Check to see if there is a node to the right
If there is, move to that node and repeat these steps
If there is not, we're done searching!
If it is less
Check to see if there is a node to the left
If there is, move to that node and repeat these steps
If there is not, we're done searching!

Big O of BST
Insertion - O(log n)

Searching - O(log n)

TRAVERSING A TREE
Two ways:

Breadth-first Search
Depth-first Search

--BFS--
  Steps - Iteratively

Create a queue (this can be an array) and a variable to store the values of nodes visited
Place the root node in the queue
Loop as long as there is anything in the queue
Dequeue a node from the queue and push the value of the node into the variable that stores the nodes
If there is a left property on the node dequeued - add it to the queue
If there is a right property on the node dequeued - add it to the queue
Return the variable that stores the values



DFS - InOrder

--Steps - Recursively
Create a variable to store the values of nodes visited
Store the root of the BST in a variable called current
Write a helper function which accepts a node
If the node has a left property, call the helper function with the left property on the node
Push the value of the node to the variable that stores the values
If the node has a right property, call the helper function with the right property on the node
Invoke the helper function with the current variable
Return the array of values
